DISASSEMBLY_SRC:
    https://github.com/alex-west/M2RoS;
/DISASSEMBLY_SRC
GRAPHICS:
    DONE:
        1. Decode tile data;
        2. Store tile data in convenient format;
        3. Put labels in screen data banks (9 - f) in disassembly for easier data extraction.
           Check .sym file generated by rgbasm for addresses of specific data segments;
        4. Decode metatiles:
            4.1. Determine format (might be same as metasprites);
            4.2. The format actually seems to be quite simple: topLeft, topRight, bottomLeft, bottomRight (see loading in mapUpdate_writeToBuffer);
    /DONE
    TODO:
        Decode metasprites:
            1. Easy to do for Samus: location of her sprites is constant;
            2. For enemies: check enemyData.asm - might be data descibing which enemy sprites to use for the room;
        Decode level data (get map):
            1. BG and window tiles always use address range $8800 - $97FF (LCDC.4 = 0)
               Scince LCDC.4 = 0, tiles are indexed using two's comlement signed integer (so tile $ff is at $8ff0, but tile $1 is at $9000);
            2. Check VBlank_updateMap;
            3. According to mapUpdate_writeToBuffer & prepMapUpdate(.row & .column) screen data (banks 9 - f) contains metatile incicies? YES IT DOES!!!
               Checked on the first screen (as displayed in emulicious) and it's data (see below);
            4. First screen: bank f, screen $7F00;

            Theoretical algorithm:
                1. Determine, which sprites and bg tiles screen uses (check if they are always updated from screen, also check m2edit post here:
                https://forum.metroidconstruction.com/index.php/topic,2982.0.html);
                2. Determine, which metatiles screen uses (same);
                3. Decode!!!
            Tile data and metatiles can be selected manually, but maybe i can automate this...

            5. Extract raw screen data from built rom (for addresses and sizes check .sym file);
            6. Looks like banks are layed out in correct order in the binary file (i.e. 1-2-3-4-5-6-7-8-9-a-b-c-d-e-f).
               Used Bless hex editor to check;

            7. Looks like tile $FF is always completely black (the air tile);
            8. Also seems that it is the only tile from range $8800 - $8ff0 that is referenced in metatiles
               (the surface and queen metatiles seem to be an exception). Need to check this;

            m2edit's author writes that room $4500 is always a filler room (see https://m2sw.zophar.net/m2edit/readme.txt).
            Need to check that;
            Also they write that scroll value for room $4500 is always $0F (no scroll). Check that;
        Implement tile data referencing in tileset .json files:
            1. Add a preprocessing stage for tileset jsons (can't directly convert to proto);
            2. Add an option to serialize tilesets with referencing;
               2.1. This will require to actually serialize tile data to json, when decoding metatiles;
            3. This will enable conversion from png to game boy graphics;
        Implement conversion back to game boy format:
            1. Simple for tile data;
            2. For metatiles:
               2.1. Available only if metatile json file is present and uses ONLY references for tile data;
               2.2. Write data from png back to the corresponding tile using info from metatile json;
               2.3. Palette issue;
    /TODO
/GRAPHICS
